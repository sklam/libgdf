import json
from pprint import pprint

import numpy as np
from numba import cuda
from numba.cuda.cudadrv.devicearray import DeviceNDArray

from libgdf_cffi import ffi, libgdf


def test_ipc():
    # make gpu array
    TESTDATA = b"\x00\x01\x00\x00\x10\x00\x00\x00\x0c\x00\x0e\x00\x06\x00\x05\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x01\x01\x00\x10\x00\x00\x00\x00\x00\n\x00\x08\x00\x00\x00\x04\x00\x00\x00\n\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00l\x00\x00\x00\x04\x00\x00\x00\xb0\xff\xff\xff\x00\x00\x01\x038\x00\x00\x00\x1c\x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x1c\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x9a\xff\xff\xff\x00\x00\x01\x00\x8c\xff\xff\xff \x00\x01\x00\x94\xff\xff\xff\x01\x00\x02\x00\x08\x00\x00\x00dest_lon\x00\x00\x00\x00\x14\x00\x18\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x14\x00\x00\x00\x14\x00\x00\x00\x00\x00\x01\x03H\x00\x00\x00$\x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00,\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x08\x00\x06\x00\x06\x00\x00\x00\x00\x00\x01\x00\xf8\xff\xff\xff \x00\x01\x00\x08\x00\x08\x00\x04\x00\x06\x00\x08\x00\x00\x00\x01\x00\x02\x00\x08\x00\x00\x00dest_lat\x00\x00\x00\x00\xd8\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x01\x00\x18\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00|\x00\x00\x00\x10\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x91\xa7\x06B\x91\xa7\x06B\x91\xa7\x06B\xc4\xcd\xdfA\x91\xa7\x06B\xc4\xcd\xdfA\xe7\xea\nB\x9c\xb3\x1cB\xe7\xea\nB\x9c\xb3\x1cB\xe7\xea\nB]n\xe3A\xe7\xea\nB\xd9$\'Brc\x03BL\x8a\xffArc\x03B\xd9$\'Brc\x03BL\x8a\xffArc\x03Bt@\x06B\x03o\x1fB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00C\xa5\xcb\xc2C\xa5\xcb\xc2C\xa5\xcb\xc2\x06\x11\xa5\xc2C\xa5\xcb\xc2\x06\x11\xa5\xc2\xd0r\xb8\xc2\x1eV\x99\xc2\xd0r\xb8\xc2\x1eV\x99\xc2\xd0r\xb8\xc2\xce\xa1\xa2\xc2\xd0r\xb8\xc2>\x81\xaf\xc2\x1b\xb4\xc1\xc2ag\xcc\xc2\x1b\xb4\xc1\xc2>\x81\xaf\xc2\x1b\xb4\xc1\xc2ag\xcc\xc2\x1b\xb4\xc1\xc2\xd1\x81\xad\xc2\x81U\xd1\xc2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    cpu_data = np.ndarray(shape=len(TESTDATA), dtype=np.byte,
                          buffer=bytearray(TESTDATA))
    gpu_data = cuda.to_device(cpu_data)
    del cpu_data

    # Use GDF IPC parser
    devptr = ffi.cast("void*", gpu_data.device_ctypes_pointer.value)
    ipcparser = libgdf.gdf_ipc_parser_open(devptr)
    assert not libgdf.gdf_ipc_parser_failed(ipcparser)
    assert not ffi.string(libgdf.gdf_ipc_parser_get_error(ipcparser))

    # get schema as json
    jsonraw = libgdf.gdf_ipc_parser_to_json(ipcparser)
    jsontext = ffi.string(jsonraw).decode()
    jsonparsed = json.loads(jsontext)
    pprint(jsonparsed)

    dataptr = libgdf.gdf_ipc_parser_get_data_offset(ipcparser)
    dataptr = int(ffi.cast('uint64_t', dataptr))
    data_region = gpu_data[dataptr:]
    print(data_region.shape)

    def get_column(schema):
        offset = schema['data_buffer']['offset']
        raw_size = schema['data_buffer']['length']
        size = schema['length']
        assert schema['dtype']['bitwidth'] == 32
        assert schema['dtype']['name'] == 'FloatingPoint'
        raw_data_col1 = data_region[offset:offset + raw_size]
        assert raw_data_col1.size == raw_size

        dtype = np.dtype(np.float32)
        itemsize = dtype.itemsize
        ary = DeviceNDArray(shape=(raw_size // itemsize,),
                            strides=(itemsize,),
                            dtype=dtype,
                            gpu_data=raw_data_col1.gpu_data)
        hary = ary[:size].copy_to_host()
        return hary

    # Get first column
    schema_col1 = jsonparsed[0]
    name_col1 = schema_col1['name']
    assert name_col1 == 'dest_lat'

    dest_lat = get_column(schema_col1)

    # Get second column
    schema_col2 = jsonparsed[1]
    name_col2 = schema_col2['name']
    assert name_col2 == 'dest_lon'

    dest_lon = get_column(schema_col2)

    libgdf.gdf_ipc_parser_close(ipcparser)

    # Check data integrity
    np.testing.assert_array_less(dest_lat, 42)
    np.testing.assert_array_less(27, dest_lat)
    np.testing.assert_array_less(dest_lon, -76)
    np.testing.assert_array_less(-105, dest_lon)


if __name__ == '__main__':
    test_ipc()
